#服务端口
server:
  port: 7004

# Spring配置
spring:
  profiles:
    active: native
  application:
    name: server-config
  rabbitmq:
    host: localhost
    port: 5672
    username: guest
    password: guest
  # 设置安全认证，Finchley版本新加了spring前缀
  security:
    user:
      name: kim
      password: 123456
  cloud:
    # Config Server配置
    config:
      server:
        # FIXME 为了更方便测试项目,这里使用本地文件进行配置
        # FIXME 如果使用git仓库,只需要将resources目录下的文件夹拷贝到相应的git仓库,修改git仓库地址,将spring.profiles.active更改为default即可.
        # 使用本地文件的配置方式, 也可以使用file:///${user.home}/config-repo的方式
        native:
          search-locations: classpath:/config/{application}
        # 使用Git仓库的配置方式
#        git:
#          # 可以使用{application}动态填入项目名
#          uri: https://github.com/kim/springcloud-conf.git
#          #username: username
#          #password: password
#          # 不校验ssl
#          skipSslValidation: true
#          # 搜索的路径，这里以项目名进行搜索=====记得加上单引号
#          search-paths: '{application}'
#          # 标签-分支
#          default-label: master
#          # 仓库的缓存位置，Linux默认放在临时目录，可能会被系统进程删除，导致报错
#          basedir: ${user.home}/git
#          # 超时时间
#          timeout: 5
#          # 强制更新，防止本地git缓存被修改
#          force-pull: true
#          # 启动时克隆仓库
#          #clone-on-start: true
#          # 将远程已经删除的分支从本地也删除
#          deleteUntrackedBranches: true

# Eureka配置
eureka:
  username: kim
  password: 123456
  client:
    serviceUrl:
      defaultZone: http://${eureka.username}:${eureka.password}@localhost:7000/eureka/
    # 定时刷新本地缓存时间
    registry-fetch-interval-seconds: 5
  instance:
    # 使用IP进行注册
    prefer-ip-address: true
    # 配置实例的注册ID
    instance-id: ${spring.cloud.client.hostname}:${server.port}
    # 心跳时间，即服务续约间隔时间（缺省为30s）
    lease-renewal-interval-in-seconds: 5
    # 发呆时间，即服务续约到期时间（缺省为90s）
    lease-expiration-duration-in-seconds: 10
    # 定义自身服务的一些标识信息(元数据),其他服务可以获得该元数据,进行一定的操作
    metadata-map:
      user.name: kim
      user.password: 123456
      zone: defaultZone
      type: config
      author: kim
      version: v1.0.0
# Endpoint
# Monitor端点用于github gitlab的webhook进行配合,刷新对应的下游服务配置
management:
  endpoints:
    web:
      exposure:
        # ['monitor']
        include: '*'
